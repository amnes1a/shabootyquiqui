options {
    STATIC = false;
}

PARSER_BEGIN(Shabootyquiqui)

import java.io.*;
public class Shabootyquiqui {
  public static void main (String args[] ) throws ParseException {
    Shabootyquiqui parser = new Shabootyquiqui(System.in);
  }
}

PARSER_END(Shabootyquiqui)

/* --------------------------------------- BEGIN Lexical specification */
SKIP : 
{ 
	  " " 
	| "\t" 
	| "\n" 
	| "\r" 
	| <"#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> 
}

// Reserved words
TOKEN : 
{ 
	  < THRUST: "thrust" > 
	| < IF: "if" > 
	| < WHILE: "while" > 
	| < DO: "do" > 
	| < STOP: "STOP" > 
	| < LET : "let" >
}

// Language symbols
TOKEN :
{
	  < EOS: "." >
	| < COLON: ":" >
	| < FUNCTION: "$" >
	| < RETURN: "->" >
	| < ACK: "ack" >
}

// Math Operation Symbols
TOKEN :
{
	  < PLUS: "+">
	| < MINUS: "-" >
	| < MUL: "*" >
	| < DIV: "/" >
	| < MOD: "%" >
	| < POW: "^" >
	| < ASSIGN: "=" >
}

// Math Relational Symbols
TOKEN :
{
	  < EQ: "==" >
	| < GT: ">"  >
	| < LT: "<"  >
	| < GE: ">=" >
	| < LE: "<=" >
	| < NE: "!=" >
}

// Data types
TOKEN : 
{
  	  < INTEGER_LITERAL: ("+"|"-")?(["0"-"9"])+ >
  	| < DOUBLE : ("+"|"-")?(["0"-"9"])+"."(["0"-"9"])+ >
  	| < STRING : "\'"(["0"-"9"]|" "|["a"-"z"]|["A"-"Z"])+"\'" >
}

// Identifiers
TOKEN :
{
	   < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
	|  < #LETTER: ["_","a"-"z","A"-"Z"] >
	|  < #DIGIT: ["0"-"9"] >
}

/* --------------------------------------- END Lexical specification */

/* --------------------------------------- BEGIN Parser specification */
void Start():{}
{
  (
    Thrust() <EOS>
  )+

  "main"
  (
    StatementExpression()
  )*
}

void Thrust():{}
{
	<THRUST> 
	(
		<IDENTIFIER>
	)+
}

/* --------------------------------------- END Parser specification */